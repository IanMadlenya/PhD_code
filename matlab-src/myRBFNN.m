function [ Y_hat ] = myRBFNN( X_trn, Y_trn, X_tst, Y_tst, goal, spread_range)
    %% RBFNN
    % Solve an Input-Output Fitting problem with a RBF Neural Network
    % Script generated by NFTOOL
    % Created Sun Oct 27 16:28:18 SGT 2013
    % 
%     CV_MSE=zeros(1,5);
    kth_ANN_MSE=zeros(1,5);
    kth_ANN_pred=zeros(length(Y_tst),5);
    trn_Idx=(1:size(X_trn,1));
    tst_Idx=(1:size(X_tst,1));
    
    % Create a Fitting Network
%     hiddenLayerSize = 10;
    
    cv=cvpartition(trn_Idx, 'kfold', 5);
    for k=1:cv.NumTestSets
        counter=1;
        for spread=spread_range
            
        trnIdx=trn_Idx(cv.training(k));
        valIdx=trn_Idx(cv.test(k));
        X_t=X_trn(trnIdx,:);
        Y_t=Y_trn(trnIdx,:);
        X_v=X_trn(valIdx,:);
        Y_v=Y_trn(valIdx,:);
        [net] = newrb(X_t',Y_t',goal,spread);
        val_pred = sim(net, X_v');
        CV_MSE(k, counter)=mean((val_pred'-Y_v).^2);
        counter=counter+1;
        end
    end
    mean_CV_MSE=mean(CV_MSE,1);
    min_idx= find(mean_CV_MSE==min(mean_CV_MSE));
    opt_net=newrb(X_t', Y_t', goal, spread_range(min_idx(1)));
    Y_hat=sim(opt_net, X_tst');
    Y_hat=Y_hat';
end

